package net.xytra.wobmail.components;
// Generated by the WOLips Templateengine Plug-in at Apr 27, 2007 12:22:38 AM

import java.util.regex.Pattern;

import javax.mail.MessagingException;
import javax.mail.Message.RecipientType;
import javax.mail.internet.AddressException;
import javax.mail.internet.MimeMessage;

import net.xytra.wobmail.export.ExportVisitor;
import net.xytra.wobmail.export.MimeMessageExportVisitor;
import net.xytra.wobmail.util.XWMUtils;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

import er.javamail.ERMailDeliveryPlainText;

public class XWMCompose extends XWMAbstractPage
{
	private static final Pattern EMAIL_ADDRESS_PATTERN = Pattern.compile("\\w+@\\w+(?:\\.\\w+)+(?:,\\w+@\\w+(?:\\.\\w+)+)*");

	private String bccAddresses;
	private String ccAddresses;
	private String emailText;
	private String toAddresses;

	public String errorMessage;

	private MimeMessage constituentMessage;

	public ExportVisitor currentAttachment;
	public NSMutableArray attachments = new NSMutableArray();

	public XWMCompose(WOContext context) {
		super(context);
	}

	public WOComponent cancelAction()
	{
		return (pageWithName(XWMList.class.getName()));
	}

	public WOComponent deleteAttachmentAction()
	{
		attachments.removeObject(currentAttachment);

		return (context().page());
	}

	public WOComponent downloadAttachmentAction()
	{
		FileDownloadPage page = (FileDownloadPage)pageWithName(FileDownloadPage.class.getName());
		page.accept(currentAttachment);

		return (page);
	}

	public WOComponent sendAction()
	{
		errorMessage = validateInput();

		if (errorMessage != null)
			return (context().page());

		ERMailDeliveryPlainText mail = new ERMailDeliveryPlainText();
		try
		{
			mail.setToAddresses(new NSArray(toAddresses.split(",")));

			if ((ccAddresses != null) && (ccAddresses.length() > 0))
				mail.setCCAddresses(new NSArray(ccAddresses.split(",")));

			if ((bccAddresses != null) && (bccAddresses.length() > 0))
				mail.setBCCAddresses(new NSArray(bccAddresses.split(",")));

			String subject = subject();
			mail.setSubject((subject != null) && (subject.length() > 0) ? subject : "(No subject)");
		}
		catch (MessagingException e)
		{
			errorMessage = "Error: " + e.getMessage();
			return (context().page());
		}

		mail.setTextContent(emailText != null ? emailText : "");
		mail.sendMail();

		return (pageWithName(XWMList.class.getName()));
	}

	//
	void attachMimeMessage(MimeMessage mimeMessage)
	{
		attachments.addObject(new MimeMessageExportVisitor(mimeMessage));
	}

	public String currentAttachmentName()
	{
		return (currentAttachment.getFileName());
	}

	public String validateInput()
	{
		if ((toAddresses == null) || (toAddresses.length() == 0))
			return ("Error: No destination address specified");
		else if (!isDestinationValid(toAddresses))
			return ("Invalid 'To' addresses");
		else if (!isDestinationValid(ccAddresses))
			return ("Invalid 'Cc' addresses");
		else if (!isDestinationValid(bccAddresses))
			return ("Invalid 'Bcc' addresses");

		return (null);
	}

	protected boolean isDestinationValid(String addresses)
	{
		if ((addresses == null) || (addresses.length() == 0))
			return (true);

		return (EMAIL_ADDRESS_PATTERN.matcher(addresses).matches());
	}

	// getters/setters
	protected MimeMessage constituentMessage()
	{
		if (this.constituentMessage == null) {
			this.constituentMessage = getMailSession().obtainNewMimeMessage();
		}

		return (this.constituentMessage);
	}

	public void setConstituentMessage(MimeMessage message)
	{
		this.constituentMessage = message;
	}

	public String subject() throws MessagingException
	{
		return (constituentMessage().getSubject());
	}

	public void setSubject(String subject) throws MessagingException
	{
		constituentMessage().setSubject(subject);
	}

	void propagateAddresses() throws MessagingException
	{
		this.toAddresses = XWMUtils.internetAddressArrayToString(constituentMessage(), RecipientType.TO);
		this.ccAddresses = XWMUtils.internetAddressArrayToString(constituentMessage(), RecipientType.CC);
		this.bccAddresses = XWMUtils.internetAddressArrayToString(constituentMessage(), RecipientType.BCC);
	}

	public String getBccAddresses() throws MessagingException
	{
//		if (constituentMessage() != null)
//			return (XWMUtils.internetAddressArrayToString(constituentMessage(), RecipientType.BCC));
//		else
		return (this.bccAddresses);
	}

	public void setBccAddresses(String bccAddresses) throws AddressException, MessagingException
	{
		if (constituentMessage() != null)
			XWMUtils.setInternetAddressArrayForString(bccAddresses, constituentMessage(), RecipientType.BCC);
//		else
		this.bccAddresses = bccAddresses;
	}

	public String getCcAddresses() throws MessagingException
	{
//		if (constituentMessage() != null)
//			return (XWMUtils.internetAddressArrayToString(constituentMessage(), RecipientType.CC));
//		else
		return (this.ccAddresses);
	}

	public void setCcAddresses(String ccAddresses) throws AddressException, MessagingException
	{
		if (constituentMessage() != null)
			XWMUtils.setInternetAddressArrayForString(ccAddresses, constituentMessage(), RecipientType.CC);
//		else
		this.ccAddresses = ccAddresses;
	}

	public String getToAddresses() throws MessagingException
	{
//		if (constituentMessage() != null)
//			return (XWMUtils.internetAddressArrayToString(constituentMessage(), RecipientType.TO));
//		else
		return (this.toAddresses);
	}

	public void setToAddresses(String toAddresses) throws MessagingException
	{
		if (constituentMessage() != null)
			XWMUtils.setInternetAddressArrayForString(toAddresses, constituentMessage(), RecipientType.TO);
//		else
		this.toAddresses = toAddresses;
	}

	public String getEmailText()
	{
		return (emailText);
	}

	public void setEmailText(String emailText) throws MessagingException
	{
		constituentMessage().setText(emailText != null ? emailText : "");

		this.emailText = emailText;
	}

}
