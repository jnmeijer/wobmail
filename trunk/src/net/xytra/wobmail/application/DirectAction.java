package net.xytra.wobmail.application;
// Generated by the WOLips Templateengine Plug-in at Apr 18, 2007 9:01:26 PM

import net.xytra.wobmail.components.FileDownloadPage;
import net.xytra.wobmail.components.FileViewPage;
import net.xytra.wobmail.components.Main;
import net.xytra.wobmail.export.ExportVisitable;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WODirectAction;
import com.webobjects.appserver.WOMessage;
import com.webobjects.appserver.WORedirect;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;

public class DirectAction extends WODirectAction
{
    public DirectAction(WORequest aRequest) {
		super(aRequest);
	}

	public WOActionResults defaultAction() {
		return pageWithName(Main.class.getName());
	}

	public WOActionResults logoutAction()
	{
		if (hasSession())
			session().terminate();

		WORedirect r = (WORedirect)pageWithName(WORedirect.class.getName());
		r.setUrl(context().directActionURLForActionNamed("default", null).split("\\?")[0]);
		return (r);
	}

	public WOActionResults downloadObjectAction()
	{
		return (exportFileActionWithComponent((FileDownloadPage)pageWithName(FileDownloadPage.class.getName())));
	}

	public WOActionResults viewObjectAction()
	{
		return (exportFileActionWithComponent((FileViewPage)pageWithName(FileViewPage.class.getName())));
	}

	protected WOActionResults exportFileActionWithComponent(ExportVisitable ev)
	{
		if (!hasSession())
			return (http404response());

		String s = request().stringFormValueForKey("id");
		if (s == null)
			return (http404response());

		int index;
		try {
			index = Integer.parseInt(s);
		}
		catch (NumberFormatException e) {
			return (http404response());
		}

		ev.accept(((Session)session()).getDownloadableObject(index));
		return (ev);
	}

	protected WOActionResults http404response()
	{
		WOResponse response = new WOResponse();
		response.setStatus(WOMessage.HTTP_STATUS_NOT_FOUND);
		response.setContent("File cannot be found");

		return (response);
	}

	protected boolean hasSession() {
		return (getSessionIDForRequest(request()) != null) && (existingSession() != null);
	}

}
