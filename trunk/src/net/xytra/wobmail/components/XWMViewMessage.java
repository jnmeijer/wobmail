package net.xytra.wobmail.components;
// Generated by the WOLips Templateengine Plug-in at Apr 21, 2007 9:51:26 PM

import java.io.IOException;

import javax.mail.Flags;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import net.xytra.wobmail.application.Session;
import net.xytra.wobmail.export.ExportVisitor;
import net.xytra.wobmail.manager.Pop3MailSessionManager;
import net.xytra.wobmail.util.XWMUtils;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSTimestamp;

public class XWMViewMessage extends XWMAbstractPage
{
	private Message message;

	public XWMViewMessage(WOContext context)
	{
		super(context);
		((Session)context.session()).clearDownloadableObjects();
	}

	// Actions
	public WOComponent deleteAction() throws MessagingException
	{
		// Mark message as deleted and return to List
		message.setFlag(Flags.Flag.DELETED, true);

		return (pageWithName(XWMList.class.getName()));
	}

	public WOComponent forwardAction() throws MessagingException, IOException
	{
		XWMCompose page = (XWMCompose)pageWithName(XWMCompose.class.getName());
		page.setConstituentMessage(Pop3MailSessionManager.instance().obtainNewMimeMessageFor(session().sessionID()));
		page.setSubject("Fwd: " + message().getSubject());
		page.setEmailText(XWMUtils.quotedText(
				XWMUtils.defaultStringContentForPart(message()),
				message().getSentDate(),
				XWMUtils.fromAddressesAsStringForMessage(message()),
				false));
		page.propagateAddresses();

		return (page);
	}

	public WOComponent forwardAsAttachmentAction()
	{
		XWMCompose page = (XWMCompose)pageWithName(XWMCompose.class.getName());
		// TODO: check if type really matches
		page.attachMimeMessage((MimeMessage)message);

		return (page);
	}

	public WOComponent replyAction() throws MessagingException, IOException
	{
		return (replyAction(false));
	}

	protected WOComponent replyAction(boolean replyToAll) throws MessagingException, IOException
	{
		XWMCompose page = (XWMCompose)pageWithName(XWMCompose.class.getName());
		page.setConstituentMessage((MimeMessage)message().reply(replyToAll));
		page.setEmailText(XWMUtils.quotedText(
				XWMUtils.defaultStringContentForPart(message()),
				message().getSentDate(),
				XWMUtils.fromAddressesAsStringForMessage(message()),
				true));
		page.propagateAddresses();

		return (page);
	}

	public WOComponent replyToAllAction() throws MessagingException, IOException
	{
		return (replyAction(true));
	}

	// Data
	public String defaultMessageContent() throws MessagingException, IOException
	{
		return (XWMUtils.defaultStringContentForPart(message()));
	}

	public String messageSender() throws MessagingException {
		return (XWMUtils.fromAddressesAsStringForMessage(this.message));
	}

	public String messageToRecipient() throws MessagingException {
		return (XWMUtils.toAddressesAsStringForMessage(this.message));
	}

	public String messageSentDate() throws MessagingException {
		return (this.message.getSentDate().toString());
	}

	public String messageSubject() throws MessagingException {
		return (this.message.getSubject());
	}

	public Message message() {
		return (this.message);
	}

	public void setMessage(Message message) {
		this.message = message;
	}

	public String viewSourceUrl()
	{
		ExportVisitor ev = new ExportVisitor()
		{
			public NSData getFileContent()
			{
				try
				{
					return (XWMUtils.fullMimeMessageSource((MimeMessage)message()));
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
				catch (MessagingException e)
				{
					e.printStackTrace();
				}
				return (NSData.EmptyData);
			}

			public String getFileName()
			{
				return ("email-" + new NSTimestamp().getTime() + ".txt");
			}

			public String getFileType()
			{
				return (XWMUtils.CONTENT_TYPE_TEXT_PLAIN);
			}
		};

		int index = ((Session)session()).registerDownloadbleObject(ev);
		return (((Session)session()).urlForViewableObject(index));
	}

}
